function [Grl,Grd,Gru,Gnl,Gnd,Gnu,Gpl,Gpd,Gpu,grL,ginL] = recursealg(Np,Al,Ad,Au,Sigin,Sigout)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Title:        recursealg.m% function [Grl,Grd,Gru,Gnl,Gnd,Gnu,Gpl,Gpd,Gpu] = recursealg(Np,Al,Ad,Au,Sigin,Sigout)% recursive algorithm to solve for the diagonal elements only of % the Non-equilibrium Green's function% HANDLES MATRICES BY 3 DIAGONALS% Grl,Grd,Gru = retarded Green's function, cell array% Gnl,Gnd,Gnu = electron Green's function, cell array% Gpl,Gpd,Gpu = hole Green's function, cell array% Np = the length of Gnd% Al,Ad,Au = matrix of coefficients, cell array% Sigin = matrix of in-scattering function, cell array % Sigout = matrix of out-scattering function, cell array %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% adapted from Dmitri Nikonov, Intel        2004-12-16  both electron and hole correl funct% upgraded by Jing Guo, UFL,                2005-8-21%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%flag_Gp = 'no';grL = cell(1,Np);                                  % initialize left-connected functionginL = cell(1,Np);                                 % initialize left-connected in-scattering functiongipL = cell(1,Np);                                 % initialize left-connected out-scattering functionGrl = cell(1,Np-1);Grd = cell(1,Np);                                  % initialize the Green's functionGru = cell(1,Np-1);Gnl = cell(1,Np-1);Gnd = cell(1,Np);                                  % initialize the electron coherence functionGnu = cell(1,Np-1);Gpl = cell(1,Np-1);Gpd = cell(1,Np);                                  % initialize the hole coherence functionGpu = cell(1,Np-1);grL{1}=inv(Ad{1});                                     % step 1for q=2:Np                                          % obtain the left-connected function    grL{q}=inv(Ad{q}-Al{q-1}*grL{q-1}*Au{q-1});endGrd{Np}=grL{Np};                                    % step 2for q=(Np-1):-1:1    Grl{q}=-Grd{q+1}*Al{q}*grL{q};                  % obtain the sub-diagonal of the Green's function    Gru{q}=-grL{q}*Au{q}*Grd{q+1};                  % obtain the super-diagonal of the Green's function    Grd{q}=grL{q}-grL{q}*Au{q}*Grl{q};              % obtain the diagonal of the Green's functionendginL{1}=grL{1}*Sigin{1}*grL{1}';                     % step 3  for q=2:Np    sla2 = Al{q-1}*ginL{q-1}*Au{q-1};    prom = Sigin{q} + sla2;    ginL{q}=grL{q}*prom*grL{q}';  % left-connected in-scattering functionendGnd{Np}=(ginL{Np});                                   % step 4for q=(Np-1):-1:1    Gnl{q} = - Grd{q+1}*Al{q}*ginL{q} - Gnd{q+1}*Au{q}'*grL{q}';  % needs to be checked        Gnu{q} = Gnl{q}';         % obtain the sub-diagonal of the electron Green's function    Gnd{q} = ginL{q} + grL{q}*Au{q}*Gnd{q+1}*Al{q}*grL{q}' - ( ginL{q}*Au{q}*Gru{q}' + Gru{q}*Al{q}*ginL{q} );                                       endswitch flag_Gp    case 'yes'gipL{1}=grL{1}*Sigout{1}*grL{1}';                    % step 3  for q=2:Np    sla2 = Al{q-1}*gipL{q-1}*Au{q-1};    prom = Sigout{q} + sla2;    gipL{q}=grL{q}*prom*grL{q}';  % left-connected in-scattering functionendGpd{Np}=(gipL{Np});                                   % step 4for q=(Np-1):-1:1    Gpl{q} = - Grd{q+1}*Al{q}*gipL{q} - Gpd{q+1}*Au{q}'*grL{q}';    % needs to be checked        Gpu{q} = Gnl{q}';                                                % needs to be checked    % obtain the sub-diagonal of the electron Green's function    %Gpd{q} = gipL{q} + grL{q}*Au{q}*Gpd{q+1}*Al{q}'*grU{q}' - ( gipL{q}*Au{q}'*Gru{q}' + Gru{q}*Al{q}*gipL{q} );end    case 'no'    for q=1:(Np-1)            Gpl{q} = i*(Grl{q}-Gru{q}') - Gnl{q};    Gpd{q} = (i*(Grd{q}-Grd{q}') - Gnd{q});                            % hole Green's function    Gpu{q} = i*(Gru{q}-Grl{q}') - Gnu{q};    endGpd{Np} = (i*(Grd{Np}-Grd{Np}') - Gnd{Np});                            % hole Green's functionend